// You need the AudioLibrary WaveHC from https://code.google.com/p/wavehc/ 
#include <FatReader.h>
#include <SdReader.h>
#include <avr/pgmspace.h>
#include "WaveUtil.h"
#include "WaveHC.h"

/*
 * SdReader and Waveshield setup 
 */

SdReader card;    // This object holds the information for the card
FatVolume vol;    // This holds the information for the partition on the card
FatReader root;   // This holds the information for the volumes root directory
FatReader file;   // This object represent the WAV file for a pi digit or period
WaveHC wave;      // This is the only wave (audio) object, since we will only play one at a time

/*
 * Define macro to put error messages in flash memory
 */

#define error(msg) error_P(PSTR(msg))

/* 
 * Files and Filereader vars
 */

char files[20][13];
uint8_t dirLevel; // indent level for file/dir names    (for prettyprinting)
dir_t dirBuf;     // buffer for directory reads

// here is where we define the buttons that we'll use. button "1" is the first, button "6" is the 6th, etc
// This handy macro lets us determine how big the array up above is, by checking the size
// we will track if a button is just pressed, just released, or 'pressed' (the current state
// volatile byte pressed[NUMBUTTONS], justpressed[NUMBUTTONS], justreleased[NUMBUTTONS];

/*
 * Drumpad definitions
 * We will 
 * NUMBUTTONS is the number of buttons
 * times :: stores the press time for each button
 * level :: is the analog level (between 0 and 1024) triggering the drumpad
 * melody :: is the key tune
 * current :: stores the current progress in playing the key tune
 * current_time :: is the current melody time
 * max_time :: the max time to complete melody
 * flame_time :: turn the flame on in <flametime> milliseconds
 */

byte buttons[] = {1,2,3,4};
#define NUMBUTTONS sizeof(buttons)

volatile byte justpressed[NUMBUTTONS];
unsigned long times[NUMBUTTONS];
int level[NUMBUTTONS] = {140,130,120,100}; 

int melody[10] = {0, 0, 1, 0, 2, 2, 0, 3, 4, 0};
int current = 0;  // current progress
unsigned long current_time = 0; // current current_time
int max_time = 9000; // in milliseconds

int flame_time = 3000; // in milliseconds

// iterator var
int i;

//// FREERAM
// this handy function will return the number of bytes currently free in RAM, great for debugging!   
int freeRam(void)
{
  extern int  __bss_end; 
  extern int  *__brkval; 
  int free_memory; 
  if((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__bss_end); 
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval); 
  }
  return free_memory; 
} 

void setup() {
  // set up Serial library at 9600 bps
  Serial.begin(9600);           
  
  PgmPrintln("DrumFlame 0.1");
  
  if (!card.init()) {
    error("Card init. failed!");
  }
  if (!vol.init(card)) {
    error("No partition!");
  }
  if (!root.openRoot(vol)) {
    error("Couldn't open dir");
  }

  PgmPrintln("Files found:");
  root.ls();
  
  // pads
  for (int i=0;i<NUMBUTTONS;i++){
    pinMode(i, INPUT);
    times[i] = 0;
  }
  
  pinMode(7, OUTPUT);      // s
  
  TCCR2A = 0;
  TCCR2B = 1<<CS22 | 1<<CS21 | 1<<CS20;

  //Timer2 Overflow Interrupt Enable
  TIMSK2 |= 1<<TOIE2;
}

SIGNAL(TIMER2_OVF_vect) {
  check_switches();
}

// Check the switches
void check_switches() {
  for (int i=0;i<NUMBUTTONS;i++){
    if (analogRead(i) > level[i] && millis() > times[i] + 150)
    { 
       times[i] = millis();  // store the 
       justpressed[i]=1;
    }
  }     
}

// THE LOOP
void loop() {
  byte i;
  
  // We have played the key melody
  if (current==10) {
    Serial.println("Funky town!");
    if(millis()-current_time < max_time) {
      finale(); // FLAME!
    } else {
      Serial.print(current_time);
      Serial.println(": No cake"); 
    }
    current = 0;
    Serial.println(current); // progress
  }
  
  // Pressing keys 1 - 4
  if (justpressed[0]) {
    justpressed[0] = 0;
    playfile("C4.WAV");
    if (melody[current]==0) {
      if (current==0) {
        current_time = millis();
        Serial.println(current_time);
      }
      current = current+1;
      Serial.println(current); 
    } else {
      current = 0;
    }
  }
  else if (justpressed[1]) {
    justpressed[1] = 0;
    playfile("BB3.WAV");
    if (melody[current]==1) {
      current = current+1; 
      Serial.println(current);
    } else {
      current = 0;
    }
  }
  else if (justpressed[2]) {
    justpressed[2] = 0;
    playfile("G3.WAV"); 
    if (melody[current]==2) {
      current = current+1; 
      Serial.println(current);
    } else {
      current = 0;
    }
  }
  else if (justpressed[3]) {
    justpressed[3] = 0;
    if (melody[current]==3) {
      current = current+1; 
      playcomplete("F4.WAV");
      Serial.println(current);
      // play additional note
      current = current+1;
      playcomplete("E4.WAV");
      Serial.println(current);
    } else {
      current = 0;
      playfile("F4.WAV");
    }
    Serial.println("F4 play");
  }
}

/*
 * print error message and halt
 */
void error_P(const char *str) {
  PgmPrint("Error: ");
  SerialPrint_P(str);
  sdErrorCheck();
  while(1);
}

/*
 * print error message and halt if SD I/O error
 */

void sdErrorCheck(void) {
  if (!card.errorCode()) return;
  PgmPrint("\r\nSD I/O error: ");
  Serial.print(card.errorCode(), HEX);
  PgmPrint(", ");
  Serial.println(card.errorData(), HEX);
  while(1);
}

/*
 * Play a file and wait for it to complete
 */

void playcomplete(char *name) {
  playfile(name);
  while (wave.isplaying);
  
  // see if an error occurred while playing
  sdErrorCheck();
}

/*
 * Open and start playing a WAV file
 */

void playfile(char *name) {
  if (wave.isplaying) {// already playing something, so stop it!
    wave.stop(); // stop it
  }
  if (!file.open(root, name)) {
    PgmPrint("Couldn't open file ");
    Serial.print(name); 
    return;
  }
  if (!wave.create(file)) {
    PgmPrintln("Not a valid WAV");
    return;
  }
  // ok time to play!
  wave.play();
}

/// FIRE!
void finale() {
  Serial.println("Finally Fire!");
  digitalWrite(7,HIGH);
  delay(flame_time);
  digitalWrite(7,LOW); 
}


